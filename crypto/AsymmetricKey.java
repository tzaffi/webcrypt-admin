package webcrypt.crypto;
import java.lang.reflect.*;

/** 
 * This extension of the Key class allows for public key cryptography.
 * In particular, each key is defined to be either private or public.
 * Private keys are assumed to contain all the information necessary
 * for creating public keys.  This differs for some approaches that
 * assert that private keys only contain enough information to decrypt
 * and that a separate key generation facility creates the private and
 * public key at the same time.
 *
 * The class contains a stand-alone command-line main method used
 * for generate public keys from private keys.  See details for
 * using the command line opion in the comments for main()
 */
public abstract class AsymmetricKey extends Key{

    /**
     * Constant for identifying public keys.
     */
    public final static boolean PUBLIC = true;

    /**
     * Constant for identifying private keys.
     */
    public final static boolean PRIVATE = !PUBLIC;
    
    /**
     * Flag for identifying type of key.
     */
    private boolean keyType;  //either PUBLIC or PRIVATE

    /**
     * Set this to be a public key.
     */
    public void setPublic(){ 
	keyType = PUBLIC; 
	setReverseKey(false);  //irreversible
    }

    /**
     * Set this to be a private key.
     */
    public void setPrivate(){ 
	keyType = PRIVATE; 
	setReverseKey(true);  //reversible to public key
    }

    /**
     * True if this is a public key.
     */
    public boolean isPublic(){ return (keyType == PUBLIC); }


    /**
     * True if this is a private key.
     */
    public boolean isPrivate(){ return (keyType == PRIVATE); }
    
    /**
     * Asymetric keys are generated by text seeds
     */
    public AsymmetricKey(String seedtext) throws KeyCreationException{}  
    
    /**
     * Any public key algorithm must have a way of generating the public key
     * from private key so this method must be implemented.
     */
    public abstract AsymmetricKey generatePublicKey() throws KeyCreationException;

    /**
     * A strong public key algorithm requires a very long key.  Typically, we cannot
     * expect the user to calculate such keys by hand, and thus the following method
     * for generating private/public key pairs should be implemented in each such class:
     *
     * The default behavior is to provide the private information into the 
     * constructor to obtain the first output, and reverse the first output to
     * obtain the second output:
    public static NAME_YOUR_KEY_HERE[] generateKeyPair(String genstring) throws KeyCreationException{
	AsymmetricKey[] out = new AsymmetricKey[2];
	out[0] = 
    }
     */

    /**
     * Standard main method used for inverting private keys
     *
     * Usage from above package structure:
     *
     * java webcrypt.crypto.AsymmetricKey keyClassName keyGenerator
     *
     * where keyClassName is the full path name of the AsymmetricKey class
     * used (e.g. webcrypt.crypto.WeakElGamal )  and 
     * keyGenerator is a string used to generate a private key in the
     * given key class (e.g. private_113_7_9 )
     */
    public static void main (String[] args) throws KeyCreationException{
	String keyClassName = args[0];
	String keystr = args[1];
	try{
	    Class keyClass = Class.forName(keyClassName);
	    Constructor keyConstructor =
		keyClass.getDeclaredConstructor(new Class[] {Class.forName("java.lang.String")});
	    AsymmetricKey key = (AsymmetricKey)keyConstructor.newInstance(new Object[] {keystr});
	    System.out.println("Key: "+key);
	    if(key.isPrivate()){
		key = key.generatePublicKey();
		System.out.println("Public version: "+key);
	    }
	}catch(Exception e){
	    throw new KeyCreationException(""+e);
	}
    }
}
